{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\jespe\\\\Documents\\\\Android-Chat\\\\components\\\\Chat.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport AsyncStorage from '@react-native-community/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\nimport CustomActions from \"./CustomActions\";\nimport { MapView } from 'expo';\n\nvar firebase = require('firebase');\n\nrequire('firebase/firestore');\n\nvar Chat = function (_React$Component) {\n  _inherits(Chat, _React$Component);\n\n  var _super = _createSuper(Chat);\n\n  function Chat() {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _super.call(this);\n\n    _this.addMessage = function () {\n      var message = _this.state.messages[0];\n      _this.referenceChatMessages && _this.referenceChatMessages.add({\n        _id: message._id,\n        text: message.text.toString(),\n        createdAt: message.createdAt,\n        user: message.user,\n        image: message.image || null,\n        location: message.location || null\n      });\n    };\n\n    _this.onSend = function () {\n      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      _this.setState(function (previousState) {\n        return {\n          messages: GiftedChat.append(previousState.messages, messages)\n        };\n      }, function () {\n        _this.saveMessages();\n\n        _this.addMessage();\n      });\n    };\n\n    _this.renderCustomActions = function (props) {\n      return React.createElement(CustomActions, _extends({}, props, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    _this.state = {\n      messages: [],\n      uid: 0,\n      isConnected: false,\n      image: null\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp({\n        apiKey: 'AIzaSyDBiw9HcxkieYg04FpvoQryDAj7U2Ht5-E',\n        authDomain: 'jw-chat-f1039.firebaseapp.com',\n        projectId: 'jw-chat-f1039',\n        storageBucket: 'jw-chat-f1039.appspot.com',\n        messagingSenderId: '1089230184479',\n        appId: '1:1089230184479:web:581fa3509e59c7cd0b752a',\n        measurementId: 'G-TE01CF40LR'\n      });\n      _this.referenceChatMessages = firebase.firestore().collection(\"messages\");\n    }\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.getMessages();\n      NetInfo.fetch().then(function (connection) {\n        if (connection.isConnected) {\n          console.log('online');\n        } else {\n          console.log('offline');\n        }\n      });\n      this.authUnsubscribe = firebase.auth().onAuthStateChanged(function (user) {\n        if (!user) {\n          firebase.auth().signInAnonymously();\n        }\n\n        _this2.setState({\n          uid: user && user.uid,\n          messages: []\n        });\n\n        _this2.unsubscribe = _this2.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(_this2.onCollectionUpdate);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.authUnsubscribe();\n      this.unsubscribe && this.unsubscribe();\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages() {\n      var messages;\n      return _regeneratorRuntime.async(function getMessages$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              messages = '';\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('messages'));\n\n            case 4:\n              _context.t0 = _context.sent;\n\n              if (_context.t0) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.t0 = [];\n\n            case 7:\n              messages = _context.t0;\n              this.setState({\n                messages: JSON.parse(messages)\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t1 = _context[\"catch\"](0);\n              console.log(_context.t1.message);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 11]], Promise);\n    }\n  }, {\n    key: \"saveMessages\",\n    value: function saveMessages() {\n      return _regeneratorRuntime.async(function saveMessages$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('messages', JSON.stringify(this.state.messages)));\n\n            case 3:\n              _context2.next = 8;\n              break;\n\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0.message);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 5]], Promise);\n    }\n  }, {\n    key: \"deleteMessages\",\n    value: function deleteMessages() {\n      return _regeneratorRuntime.async(function deleteMessages$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem('messages'));\n\n            case 3:\n              this.setState({\n                messages: []\n              });\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0.message);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[0, 6]], Promise);\n    }\n  }, {\n    key: \"handleConnectivityChange\",\n    value: function handleConnectivityChange(state) {\n      var isConnected = state.isConnected;\n\n      if (isConnected == true) {\n        this.setState({\n          isConnected: true\n        });\n        this.unsubscribe = this.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(this.onCollectionUpdate);\n      } else {\n        this.setState({\n          isConnected: false\n        });\n      }\n    }\n  }, {\n    key: \"onCollectionUpdate\",\n    value: function onCollectionUpdate(querySnapshot) {\n      var messages = [];\n      querySnapshot.forEach(function (doc) {\n        var data = doc.data();\n        messages.push({\n          _id: data._id,\n          text: data.text.toString(),\n          createdAt: data.createdAt.toDate(),\n          user: data.user,\n          image: data.image || null,\n          location: data.location || null\n        });\n      });\n\n      this.setState = function () {\n        return {\n          messages: messages\n        };\n      };\n\n      console.log(messages);\n    }\n  }, {\n    key: \"renderBubble\",\n    value: function renderBubble(props) {\n      return React.createElement(Bubble, _extends({}, props, {\n        wrapperStyle: {\n          right: {\n            backgroundColor: '#FF364E'\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var name = this.props.route.params.name;\n      this.props.navigation.setOptions({\n        title: name\n      });\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }\n      }, this.state.loggedInText), React.createElement(GiftedChat, {\n        messages: this.state.messages,\n        renderBubble: this.renderBubble,\n        isConnected: this.state.isConnected,\n        renderCustomView: this.renderCustomView,\n        renderActions: this.renderCustomActions,\n        onSend: function onSend(messages) {\n          return _this3.onSend(messages);\n        },\n        user: {\n          _id: this.state.uid\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }), Platform.OS === 'android' ? React.createElement(KeyboardAvoidingView, {\n        behavior: \"height\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }) : null);\n    }\n  }]);\n\n  return Chat;\n}(React.Component);\n\nexport { Chat as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/jespe/Documents/Android-Chat/components/Chat.js"],"names":["React","PropTypes","AsyncStorage","NetInfo","GiftedChat","Bubble","CustomActions","MapView","firebase","require","Chat","addMessage","message","state","messages","referenceChatMessages","add","_id","text","toString","createdAt","user","image","location","onSend","setState","previousState","append","saveMessages","renderCustomActions","props","uid","isConnected","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","collection","getMessages","fetch","then","connection","console","log","authUnsubscribe","auth","onAuthStateChanged","signInAnonymously","unsubscribe","orderBy","onSnapshot","onCollectionUpdate","getItem","JSON","parse","setItem","stringify","removeItem","querySnapshot","forEach","doc","data","push","toDate","right","backgroundColor","name","route","params","navigation","setOptions","title","styles","container","textAlign","color","loggedInText","renderBubble","renderCustomView","Platform","OS","Component","StyleSheet","create","flex","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\nimport NetInfo from '@react-native-community/netinfo';\r\nimport { View, Text, StyleSheet, KeyboardAvoidingView, Platform } from 'react-native';\r\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\r\nimport CustomActions from './CustomActions';\r\nimport { MapView } from 'expo';\r\n\r\nconst firebase = require('firebase');\r\nrequire('firebase/firestore');\r\n\r\nexport default class Chat extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      messages: [],\r\n      uid: 0,\r\n      isConnected: false,\r\n      image:null,\r\n    };\r\n\r\n    if (!firebase.apps.length) {\r\n      firebase.initializeApp({\r\n        apiKey: 'AIzaSyDBiw9HcxkieYg04FpvoQryDAj7U2Ht5-E',\r\n        authDomain: 'jw-chat-f1039.firebaseapp.com',\r\n        projectId: 'jw-chat-f1039',\r\n        storageBucket: 'jw-chat-f1039.appspot.com',\r\n        messagingSenderId: '1089230184479',\r\n        appId: '1:1089230184479:web:581fa3509e59c7cd0b752a',\r\n        measurementId: 'G-TE01CF40LR'\r\n      });\r\n      this.referenceChatMessages = firebase.firestore().collection(\"messages\");\r\n    }\r\n  }\r\n\r\n  // fetching the netinfo and makes a user\r\n  componentDidMount() {\r\n    this.getMessages();\r\n\r\n    NetInfo.fetch().then(connection => {\r\n      if (connection.isConnected) {\r\n        console.log('online');\r\n      } else {\r\n        console.log('offline');\r\n      }\r\n    });\r\n\r\n    this.authUnsubscribe = firebase.auth()\r\n      .onAuthStateChanged((user) => {\r\n        if (!user) {\r\n          firebase.auth().signInAnonymously();\r\n        }\r\n        this.setState({\r\n          uid: user && user.uid,\r\n          messages: [],\r\n        });\r\n        this.unsubscribe = this.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(this.onCollectionUpdate);\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.authUnsubscribe();\r\n    this.unsubscribe && this.unsubscribe();\r\n  }\r\n\r\n  // localstoreage\r\n  async getMessages() {\r\n    try {\r\n      let messages = '';\r\n      messages = await AsyncStorage.getItem('messages') ||  [];\r\n      this.setState({\r\n        messages: JSON.parse(messages)\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  // save the messages on firebase\r\n  async saveMessages() {\r\n    try{\r\n      await AsyncStorage.setItem('messages', JSON.stringify(this.state.messages));\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  // deletemessages on firebase\r\n  async deleteMessages() {\r\n    try {\r\n      await AsyncStorage.removeItem('messages');\r\n      this.setState({\r\n        messages: []\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  handleConnectivityChange(state) {\r\n    const isConnected = state.isConnected;\r\n\r\n    if (isConnected == true) {\r\n      this.setState({\r\n        isConnected: true,\r\n      });\r\n      this.unsubscribe = this.referenceChatMessages.orderBy(\"createdAt\", \"desc\").onSnapshot(this.onCollectionUpdate);\r\n    } else {\r\n      this.setState({\r\n        isConnected: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // creating the collection on firebase\r\n  onCollectionUpdate(querySnapshot) {\r\n    const messages = [];\r\n    // go through each document\r\n    querySnapshot.forEach((doc) => {\r\n      // get the QueryDocumentSnapshot's data\r\n      var data = doc.data();\r\n      messages.push({\r\n        _id: data._id,\r\n        text: data.text.toString(),\r\n        createdAt: data.createdAt.toDate(),\r\n        user: data.user,\r\n        image: data.image || null,\r\n        location: data.location || null,\r\n      });\r\n    });\r\n    this.setState = () => ({ messages,\r\n    });\r\n    console.log(messages);\r\n  }\r\n\r\n  addMessage = () => { \r\n    // add a new list to the collection\r\n    const message = this.state.messages[0];\r\n    this.referenceChatMessages && this.referenceChatMessages.add({\r\n      _id: message._id,\r\n      text: message.text.toString(),\r\n      createdAt: message.createdAt,\r\n      user: message.user,\r\n      image: message.image || null,\r\n      location: message.location || null,\r\n    });\r\n  }\r\n\r\n  // when we send we trigger the onSend to the gifted chat in return\r\n  onSend = (messages = []) => {\r\n    this.setState(previousState => ({\r\n      messages: GiftedChat.append(previousState.messages, messages),\r\n    }),\r\n    () => {\r\n      this.saveMessages();\r\n      this.addMessage();\r\n    }\r\n    );\r\n  }\r\n\r\n  // this code changes the color for the chatbubbles\r\n  renderBubble(props) {\r\n    return (\r\n      <Bubble\r\n        {...props}\r\n        wrapperStyle={{ right: { backgroundColor: '#FF364E' } }}\r\n      />\r\n    );\r\n  }\r\n\r\n  // here we render the customAction component inside the chat component\r\n  renderCustomActions = (props) => {\r\n    return <CustomActions {...props} />;\r\n  }\r\n  // renderCustomView(props) {\r\n  //   const { currentMessage } = props;\r\n  //   if (currentMessage.location) {\r\n  //     return (\r\n  //       <MapView\r\n  //         style={{ width: 150, height: 100, borderRadius: 13, margin: 3 }}\r\n  //         region={{\r\n  //           latitude: currentMessage.location.latitude,\r\n  //           longitude: currentMessage.location.longitude,\r\n  //           latitudeDelta: 0.0922,\r\n  //           longitudeDelta: 0.0421,\r\n  //         }}\r\n  //       />\r\n  //     );\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  render() {\r\n    let name = this.props.route.params.name;\r\n    this.props.navigation.setOptions({ title: name });\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={{ textAlign: 'center', color: 'grey' }}>{this.state.loggedInText}</Text>\r\n        <GiftedChat \r\n          messages={this.state.messages}\r\n          renderBubble={this.renderBubble}\r\n          isConnected={this.state.isConnected}\r\n          renderCustomView={this.renderCustomView}  \r\n          renderActions={this.renderCustomActions}  \r\n          onSend={messages => this.onSend(messages)}\r\n          user={{\r\n            _id: this.state.uid,\r\n          }} />\r\n        { Platform.OS === 'android' ? \r\n          <KeyboardAvoidingView behavior=\"height\" /> : null\r\n        }\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: 'white'      \r\n  },\r\n});\r\n\r\n// CustomActions.contextTypes = {\r\n//   actionSheet: PropTypes.function,\r\n// };\r\n\r\n// Chat.propTypes = {\r\n//   navigation: {\r\n//     setOptions: PropTypes.function,\r\n//   },\r\n//   route: {\r\n//     params: {\r\n//       name: PropTypes.string,\r\n//     }\r\n//   }\r\n// };"]},"metadata":{},"sourceType":"module"}